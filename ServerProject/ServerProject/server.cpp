#include <iostream>
#include <winsock2.h>
#include <windows.h>
#include <vector>

#define CHANGE_ACCOUNT_NUMBER 1
#define EXIT 2
#define BANK_ACCOUNT_NUMBER_LENGTH 26

struct connectionData
{
	SOCKET connectionSocket;
	bool* run;
	std::string* bankAccountNumber;
};

DWORD WINAPI connectionHandler(void* args);
DWORD WINAPI listenerHandler(void* args);
std::string typeAccountNumber();

int main()
{
	std::string accountNumber = typeAccountNumber();
	bool run = true;

	connectionData mainData;
	mainData.run = &run;
	mainData.connectionSocket = NULL;
	mainData.bankAccountNumber = &accountNumber;
	HANDLE listeningThread = CreateThread(NULL, 0, listenerHandler, (void*)(&mainData), 0, NULL);
	if (listeningThread == INVALID_HANDLE_VALUE)
	{
		std::cout << "listening thread error: " << GetLastError() << std::endl;
		return -1;
	}
	
	int option;
	while (run)
	{
		system("cls");
		std::cout << "Current bank accoutn number: " << accountNumber << std::endl;
		std::cout << "Choose action:" << std::endl;
		std::cout << "1. Change bank account number" << std::endl;
		std::cout << "2. exit" << std::endl;
		std::cin >> option;
		switch (option)
		{
		case CHANGE_ACCOUNT_NUMBER:
			accountNumber = typeAccountNumber();
			break;
		case EXIT:
			run = false;
			system("cls");
			std::cout << "Waiting for threads termination..." << std::endl;
			WaitForSingleObject(listeningThread, INFINITE); // czekaj na zakoñczenie w¹tku nas³uchuj¹cego
			break;
		}
	}
	return 0;
}

DWORD WINAPI listenerHandler(void* args)
{
	connectionData* argsData = (connectionData*)(args);
	std::vector<HANDLE> connectionThreads;
	WSADATA wsadata;
	WORD version = MAKEWORD(2, 0);
	if (WSAStartup(version, &wsadata) != 0)
	{
		std::cout << "WSAStartup error: " << WSAGetLastError() << std::endl;
		return -1;
	}
	SOCKET listeningSocket = socket(AF_INET, SOCK_STREAM, 0);
	if (listeningSocket == INVALID_SOCKET)
	{
		std::cout << "socket error: " << WSAGetLastError() << std::endl;
		return -1;
	}

	sockaddr_in serverSocketData;
	memset((void*)(&serverSocketData), 0, sizeof(serverSocketData));
	serverSocketData.sin_family = AF_INET;
	serverSocketData.sin_port = htons(1337);
	serverSocketData.sin_addr.s_addr = htonl(INADDR_ANY);

	if (bind(listeningSocket, (sockaddr FAR*)(&serverSocketData), sizeof(serverSocketData)) == SOCKET_ERROR)
	{
		std::cout << "bind error: " << WSAGetLastError() << std::endl;
		return -1;
	}
	if (listen(listeningSocket, 5) == SOCKET_ERROR)
	{
		std::cout << "listen error: " << WSAGetLastError() << std::endl;
		return -1;
	}
	SOCKET handlingSocket;
	sockaddr_in clientSocketData;
	int clientSocketDataSize = sizeof(clientSocketData);
	timeval timeLimit;
	timeLimit.tv_sec = 1;
	timeLimit.tv_usec = 0;
	fd_set readfds;
	int selectStatus;
	while (true)
	{
		while (true)
		{
			FD_ZERO(&readfds);
			FD_SET(listeningSocket, &readfds);
			selectStatus = select(0, &readfds, NULL, NULL, &timeLimit);
			if (*(argsData->run) == false)
			{
				if (connectionThreads.size() > 0)
					WaitForMultipleObjects(connectionThreads.size(), (HANDLE*)(&connectionThreads[0]), true, INFINITE);
				WSACleanup();
				ExitThread(0);
			}
			else if (selectStatus > 0)
				break;
			else if (selectStatus == SOCKET_ERROR)
			{
				std::cout << "Listening thread (select) error: " << WSAGetLastError() << std::endl;
				return -1;
			}
		}
		if ((handlingSocket = accept(listeningSocket, (sockaddr FAR*)(&clientSocketData), &clientSocketDataSize)) == INVALID_SOCKET)
		{
			std::cout << "accpet connection error: " << WSAGetLastError() << std::endl;
			return -1;
		}
		connectionData* data = new connectionData;
		data->run = argsData->run;
		data->bankAccountNumber = argsData->bankAccountNumber;
		data->connectionSocket = handlingSocket;
		connectionThreads.push_back(CreateThread(NULL, 0, connectionHandler, (void*)data, 0, NULL));
	}
}

DWORD WINAPI connectionHandler(void* args)
{
	connectionData* data = (connectionData*)(args);
	std::string oldAccountNumber = "";
	while (*(data->run))
	{
		if (oldAccountNumber != *(data->bankAccountNumber))
		{
			oldAccountNumber = *(data->bankAccountNumber);
			if (send(data->connectionSocket, oldAccountNumber.c_str(), oldAccountNumber.length()+1, 0) == SOCKET_ERROR)
				break;
		}
		Sleep(1000);
	}
	closesocket(data->connectionSocket);
	delete data;
	ExitThread(0);
}

std::string typeAccountNumber()
{
	std::string accountNumber = "";
	while (accountNumber.length() != BANK_ACCOUNT_NUMBER_LENGTH)
	{
		system("cls");
		std::cout << "Type valid bank account number: ";
		std::cin >> accountNumber;
	}
	return accountNumber;
}
